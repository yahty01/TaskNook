# üì¶ Project Snapshot
üïì Generated: 2025-07-09T01:20:35.012383
==================================================

üìÅ root
----------------------------------------

üìÑ .env
==============================
VITE_BASE_URL=https://social-network.samuraijs.com/api/1.1/
VITE_AUTH_TOKEN=f914bf82-e7ef-4812-b425-85b255b23b7a
VITE_API_KEY=c5f5474d-766b-40d0-be74-1cf661d70d67

üìÑ index.tsx
==============================
import React from "react"
import ReactDOM from "react-dom/client"
import { store } from "app/store"
import { Provider } from "react-redux"
import { BrowserRouter } from "react-router"
import { App } from "app/App"

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
root.render(
  <React.StrictMode>
    {/* –û–±–µ—Ä–Ω–∫—Ç—å –¥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ –ø–æ—Å–ª–µ ? –û—Ç–≤–µ—Ç: –ù–µ –≤–∞–∂–Ω–æ, –∏ —Ç–∞–∫ –∏ —Ç–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å */}
    <BrowserRouter>
      <Provider store={store}>
        <App />
      </Provider>
    </BrowserRouter>
  </React.StrictMode>,
)
// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals


üìÑ project_snapshot.txt
==============================


üìÑ snapshot.py
==============================
import os
import sys
import datetime

OUTPUT_FILE = "project_snapshot.txt"
MAX_FILE_LENGTH = 10000
FULL_MODE = "--full" in sys.argv

EXCLUDED_DIRS = {
    "__pycache__", ".git", ".mypy_cache", ".pytest_cache", ".idea", "node_modules"
}

INCLUDED_EXTENSIONS = (
    ".py", ".ts", ".tsx", ".js", ".jsx", ".json", ".md", ".txt", ".yml", ".yaml",
    ".env", ".html", ".scss", ".css", ".sql", ".lock", ".toml", ".prisma"
)

INCLUDED_FILES = {
    "Dockerfile", ".gitignore", ".dockerignore", "yarn.lock", ".env.example"
}


def should_include(file: str) -> bool:
    return file.endswith(INCLUDED_EXTENSIONS) or file in INCLUDED_FILES


def walk_and_save(base_path: str):
    with open(OUTPUT_FILE, "w", encoding="utf-8") as out:
        # üßæ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞—Ç–∞
        out.write("# üì¶ Project Snapshot\n")
        out.write(f"üïì Generated: {datetime.datetime.now().isoformat()}\n")
        out.write("=" * 50 + "\n")

        for root, dirs, files in os.walk(base_path):
            dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
            rel_root = os.path.relpath(root, base_path)
            if rel_root == ".":
                rel_root = "root"

            out.write(f"\nüìÅ {rel_root}\n" + "-" * 40 + "\n")

            for file in files:
                if should_include(file):
                    file_path = os.path.join(root, file)
                    rel_path = os.path.relpath(file_path, base_path)

                    out.write(f"\nüìÑ {rel_path}\n" + "=" * 30 + "\n")
                    try:
                        with open(file_path, "r", encoding="utf-8") as f:
                            content = f.read()
                            if not FULL_MODE and len(content) > MAX_FILE_LENGTH:
                                out.write("[‚ö†Ô∏è —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–Ω]\n\n")
                                content = content[:MAX_FILE_LENGTH]
                            out.write(content + "\n")
                    except Exception as e:
                        out.write(f"[–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}]\n")
                else:
                    out.write(f"[–ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ INCLUDED_EXTENSIONS)]: {file}\n")

    print(f"‚úÖ Snapshot –≥–æ—Ç–æ–≤: {OUTPUT_FILE} ({'full' if FULL_MODE else 'truncated'})")


if __name__ == "__main__":
    walk_and_save(".")


üìÑ styled.d.ts
==============================
import "styled-components"
// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ Theme –∏–∑ Material-UI, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º MUI
import { Theme } from "@mui/material/styles" // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ styled-components

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ styled-components
declare module "styled-components" {
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ DefaultTheme
  export interface DefaultTheme extends Theme {}
  /*
   * –ß—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç:
   * 1. –ë–µ—Ä–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π DefaultTheme –∏–∑ styled-components
   * 2. –†–∞—Å—à–∏—Ä—è–µ—Ç –µ–≥–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∏–∑ MUI Theme
   * 3. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ theme prop, –±—É–¥—É—Ç –∑–Ω–∞—Ç—å –æ:
   *    - palette (–≤–∫–ª—é—á–∞—è background, text –∏ —Ç.–¥.)
   *    - typography
   *    - spacing
   *    - –∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö MUI —Ç–µ–º—ã
   *
   * –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:
   * - styled-components –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∑–Ω–∞–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ MUI —Ç–µ–º—ã
   * - –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤ MUI –∏ styled-components
   * - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å theme.palette.* –±–µ–∑ –æ—à–∏–±–æ–∫ TypeScript
   */
}


üìÅ app
----------------------------------------

üìÑ app\App.styled.ts
==============================
import styled from "styled-components"

export const AppStyled = styled.div`
  background-color: ${({ theme }) => theme.palette.background.default};
  min-height: 100vh;
`


üìÑ app\App.tsx
==============================
import React, { useEffect, useState } from "react"
import { ThemeProvider as ThemeProviderMUI } from "@mui/material/styles"
import styled, { ThemeProvider as ThemeProviderStyled } from "styled-components"
import { getTheme } from "common/lib/theme/getTheme"
import { AppStyled } from "./App.styled"
import { Header } from "common/components"
import { useAppSelector } from "common/hooks/useAppSelector"
import ErrorSnackbar from "common/components/ErrorSnackbar/ErrorSnackbar"
import { useAppDispatch } from "common/hooks"
import { Routing } from "common/routing"
import Container from "@mui/material/Container"
import CircularProgress from "@mui/material/CircularProgress"
import { GlobalStyle } from "../styles/GlobalStyled"
import { useMeQuery } from "../features/auth/api/authApi"
import { ResultCode } from "common/types/enums"
import { selectError, selectThemeMode, setIsLoggedIn } from "app/model/appSlice"

//todo: –ü–æ–ª—Å–µ –ª–æ–≥–∞—É—Ç–∞, –Ω—É–∂–Ω–æ —É–±–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—É–¥—É–ª–∏—Å—Ç–∞—Ö –≤ —Å—Ç–µ–π—Ç–µ
export function App() {
  const [isInitialized, setIsInitialized] = useState(false)
  const { data, isLoading } = useMeQuery()

  const dispatch = useAppDispatch()

  const themeMode = useAppSelector(selectThemeMode)
  const error = useAppSelector(selectError)

  const theme = getTheme(themeMode)

  useEffect(() => {
    if (isLoading) return
    setIsInitialized(true)
    if (data?.resultCode === ResultCode.Success) {
      dispatch(setIsLoggedIn({ isLoggedIn: true }))
    }
  }, [isLoading])

  //todo: —Å–ø–æ–∑–∏—Ü–∏–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–∏—Ç—å 1 —Å–µ–∫—É–Ω–¥—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
  if (!isInitialized) {
    return (
      <StyledContainer>
        <CircularProgress size={150} thickness={3} />
      </StyledContainer>
    )
  }

  return (
    <ThemeProviderMUI theme={theme}>
      <ThemeProviderStyled theme={theme}>
        <AppStyled className="s.App">
          <Header />
          <Container maxWidth="xl" style={{ marginTop: "5rem" }}>
            <Routing />
          </Container>
          <ErrorSnackbar dispatch={dispatch} error={error} />
          <GlobalStyle theme={theme} />
        </AppStyled>
      </ThemeProviderStyled>
    </ThemeProviderMUI>
  )
}

//todo: –í—ã–Ω–µ—Å—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –∫—Ä—É—Ç–∏–ª–∫–∞ –Ω–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞
const StyledContainer = styled.div`
  position: fixed;
  top: 30%;
  text-align: center;
  width: 100%;
`


üìÑ app\baseApi.ts
==============================
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { AUTH_TOKEN } from "common/constants"
import { handleError } from "common/utils"

export const baseApi = createApi({
  reducerPath: "baseTodolistApi",
  tagTypes: ["Todolist", "Task"],
  // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–ø–∏—Å–∞–ª—Å—è
  keepUnusedDataFor: 14400, // 4 hours
  // // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏)
  // refetchOnFocus: false,
  // // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  // refetchOnReconnect: false,
  baseQuery: async (args, api, extraOptions) => {
    const result = await fetchBaseQuery({
      baseUrl: process.env.REACT_APP_BASE_URL,
      prepareHeaders: (headers) => {
        headers.set("API-KEY", process.env.REACT_APP_API_KEY || "api-key-not-found")
        headers.set("Authorization", `Bearer ${localStorage.getItem(AUTH_TOKEN)}`)
      },
    })(args, api, extraOptions)

    handleError(api, result)

    return result
  },
  endpoints: () => ({}),
})
//_____________________________–ø—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è, –±–µ–∑ –∫—Å—Ç–æ–º–Ω–æ–≥–æ baseQuery__________________________________________________
// export const baseApi = createApi({
//   reducerPath: "baseTodolistApi",
//   tagTypes: ["Todolist", "Task"],
//   baseQuery: fetchBaseQuery({
//     baseUrl: process.env.REACT_APP_BASE_URL,
//     prepareHeaders: (headers) => {
//       headers.set("API-KEY", process.env.REACT_APP_API_KEY || "api-key-not-found")
//       headers.set("Authorization", `Bearer ${localStorage.getItem(AUTH_TOKEN)}`)
//     },
//   }),
//   endpoints: () => ({}),
// })


üìÑ app\Main.tsx
==============================
import React from "react"
import { AddItemForm } from "common/components"
import { Todolists } from "../features/todolists/ui/Todolists/Todolists"
import Grid from "@mui/material/Grid2"
import styled from "styled-components"
import { useCreateTodolistMutation } from "../features/todolists/api/todolistsApi"

export function Main() {
  const [createTodolist] = useCreateTodolistMutation()

  const createTodolistHandler = (title: string) => {
    createTodolist({ title })
  }
  return (
    <div>
      <CreateTodolist>
        <AddItemForm addItem={createTodolistHandler} />
      </CreateTodolist>
      {/*<img src={starOne} alt="Star" />*/}
      <Grid container spacing={4}>
        <Todolists />
      </Grid>
    </div>
  )
}

export const CreateTodolist = styled.div`
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
`


üìÑ app\store.ts
==============================
import { appReducer, appSlice } from "./model/appSlice"
import { configureStore } from "@reduxjs/toolkit"
import { setupListeners } from "@reduxjs/toolkit/query"
import { baseApi } from "app/baseApi"
// import { errorMiddleware } from "common/utils"

export const store = configureStore({
  reducer: {
    [appSlice.name]: appReducer,
    [baseApi.reducerPath]: baseApi.reducer,
  },
  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(baseApi.middleware, errorMiddleware),
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(baseApi.middleware),
})
export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

setupListeners(store.dispatch)


üìÅ app\model
----------------------------------------

üìÑ app\model\appSlice.ts
==============================
import { RequestStatus } from "common/types/enums"
import { createSlice, isFulfilled, isPending, isRejected } from "@reduxjs/toolkit"
import { todolistsApi } from "../../features/todolists/api/todolistsApi"
import { tasksApi } from "../../features/todolists/api/tasksApi"
import { getInitialThemeMode, ThemeMode } from "common/utils/theme/themeUtils"

export const appSlice = createSlice({
  name: "app",
  initialState: {
    themeMode: getInitialThemeMode(),
    status: "idle" as RequestStatus,
    error: null as Error,
    isLoggedIn: false,
  },
  selectors: {
    selectThemeMode: (state) => state.themeMode,
    selectStatus: (state) => state.status,
    selectError: (state) => state.error,
    selectIsLoggedIn: (state) => state.isLoggedIn,
  },
  reducers: (create) => ({
    setAppStatus: create.reducer<{ status: RequestStatus }>((state, action) => {
      state.status = action.payload.status
    }),
    changeTheme: create.reducer<{ themeMode: ThemeMode }>((state, action) => {
      const newTheme = action.payload.themeMode === "dark" ? "light" : "dark"
      localStorage.setItem("theme", newTheme)
      state.themeMode = newTheme
    }),
    setAppError: create.reducer<{ error: Error }>((state, action) => {
      state.error = action.payload.error
    }),
    setIsLoggedIn: create.reducer<{ isLoggedIn: boolean }>((state, action) => {
      state.isLoggedIn = action.payload.isLoggedIn
    }),
  }),
  extraReducers: (builder) => {
    builder.addMatcher(isPending, (state, action) => {
      if (
        todolistsApi.endpoints.getTodolists.matchPending(action) ||
        tasksApi.endpoints.getTasks.matchPending(action)
      ) {
        return
      }
      state.status = RequestStatus.loading
    })
    builder.addMatcher(isFulfilled, (state) => {
      state.status = RequestStatus.succeeded
    })
    builder.addMatcher(isRejected, (state) => {
      state.status = RequestStatus.failed
    })
  },
})

export const { setAppError, changeTheme, setAppStatus, setIsLoggedIn } = appSlice.actions
export const { selectIsLoggedIn, selectStatus, selectError, selectThemeMode } = appSlice.selectors
export const appReducer = appSlice.reducer

//types
export type Error = null | string

export type AppInitialState = ReturnType<typeof appSlice.getInitialState>


üìÅ app\model\__tests__
----------------------------------------

üìÑ app\model\__tests__\app-reducer.test.ts
==============================
// import { RequestStatus } from "common/types/enums"
// import { AppInitialState, appReducer, changeTheme } from "app/model/appSlice"
//
// test("themeMode", () => {
//   // 1. –°—Ç–∞—Ä—Ç–æ–≤—ã–π state
//   const startState: AppInitialState = {
//     themeMode: "light",
//     status: RequestStatus.idle,
//     error: null,
//   }
//
//   // –í–º–µ—Å—Ç–æ —Ö—É–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
//   const themeMode = startState.themeMode
//
//   // 2. –î–µ–π—Å—Ç–≤–∏–µ
//   const endState = appReducer(startState, changeTheme({ themeMode: "dark" }))
//
//   // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è (–∏–∑–º–µ–Ω–µ–Ω–∏—è state) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—é
//   expect(endState.themeMode).toBe("dark")
// })


üìÅ common
----------------------------------------

üìÅ common\actions
----------------------------------------

üìÑ common\actions\common.actions.ts
==============================
import { createAction } from "@reduxjs/toolkit"
import { TodolistResponse } from "../../features/todolists/api/todolistsApi.types"
import { FilterValue } from "../../features/todolists/ui/Todolists/Todolist/Todolist"
import { RequestStatus } from "common/types/enums"
import { DomainTask } from "../../features/todolists/api/tasksApi.types"

export type Tasks = {
  [todolistId: string]: DomainTask[]
}

export type DomainTodolist = TodolistResponse & {
  filter: FilterValue
  entityStatus: RequestStatus
}

export type ClearTodolistsData = {
  tasks: Tasks
  todolists: DomainTodolist[]
}

export const clearTodolistsData = createAction<ClearTodolistsData>("common/clearTodolistsData")


üìÅ common\components
----------------------------------------

üìÑ common\components\index.ts
==============================
export * from "./AddItemForm/AddItemForm"
export * from "./ButtonSwitchTheme/ButtonSwitchTheme"
export * from "./EditableSpan/EditableSpan"
export * from "./Header/Header"


üìÅ common\components\AddItemForm
----------------------------------------

üìÑ common\components\AddItemForm\AddItemForm.tsx
==============================
import React, { ChangeEvent, KeyboardEvent, useState } from "react"
import Button from "@mui/material/Button"
import AddIcon from "@mui/icons-material/Add"
import TextField from "@mui/material/TextField"
import Box from "@mui/material/Box"
import { getTheme } from "common/lib/theme"
import { useAppSelector } from "common/hooks"
import { selectThemeMode } from "app/model/appSlice"

type AddItemFormProps = {
  addItem: (title: string) => void
  disabled?: boolean
}

export function AddItemForm({ addItem, disabled }: AddItemFormProps) {
  //todo: rewrite to hook form
  const [inputItemText, setInputItemText] = useState("")
  const [error, setError] = useState<string | null>(null)
  const themeMode = useAppSelector(selectThemeMode)
  const theme = getTheme(themeMode)

  const isEmptyInput = inputItemText.trim() === ""

  const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    setError(null)
    setInputItemText(e.currentTarget.value)
  }

  const addItemHandler = () => {
    isEmptyInput ? setError("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º") : addItem(inputItemText.trim())
    setInputItemText("")
  }

  const addItemOnKeyUpHandler = (event: KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      addItemHandler()
    }
  }

  return (
    <Box sx={{ margin: "15px 0" }} display={"flex"}>
      <TextField
        label="Enter a title"
        variant={"outlined"}
        value={inputItemText}
        size={"small"}
        error={!!error}
        helperText={error}
        onChange={onTitleChangeHandler}
        onKeyUp={addItemOnKeyUpHandler}
        disabled={disabled}
      />
      <Button
        onClick={addItemHandler}
        aria-label="Add"
        variant={"contained"}
        sx={{ marginLeft: "8px", backgroundColor: theme.palette.primary.main }}
        disabled={disabled}
      >
        <AddIcon />
      </Button>
    </Box>
  )
}


üìÅ common\components\ButtonSwitchTheme
----------------------------------------

üìÑ common\components\ButtonSwitchTheme\ButtonSwitchTheme.tsx
==============================
import IconButton from "@mui/material/IconButton"
import Brightness7Icon from "@mui/icons-material/Brightness7"
import Brightness4Icon from "@mui/icons-material/Brightness4"
import { changeTheme, selectThemeMode } from "app/model/appSlice"
import { getTheme } from "common/lib/theme"
import { useAppDispatch, useAppSelector } from "common/hooks"

export const ButtonSwitchTheme = () => {
  const dispatch = useAppDispatch()
  const themeMode = useAppSelector(selectThemeMode)
  const theme = getTheme(themeMode)

  const toggleColorMode = () => {
    dispatch(changeTheme({ themeMode }))
  }

  return (
    <IconButton sx={{ ml: 1 }} onClick={toggleColorMode} color="inherit">
      {theme.palette.mode === "dark" ? <Brightness7Icon /> : <Brightness4Icon />}
    </IconButton>
  )
}


üìÅ common\components\EditableSpan
----------------------------------------

üìÑ common\components\EditableSpan\EditableSpan.styled.ts
==============================
import styled from "styled-components"
import TextField from "@mui/material/TextField"

export const StyledInput = styled(TextField)`
  &:hover {
    cursor: pointer;
  }
  flex-grow: 1;
`
export const StyledSpan = styled.span`
  &:hover {
    cursor: pointer;
  }
  flex-grow: 1;
  max-width: 75%;
  word-break: break-word;
`


üìÑ common\components\EditableSpan\EditableSpan.tsx
==============================
import { ChangeEvent, KeyboardEvent, useState } from "react"
import { StyledInput, StyledSpan } from "./EditableSpan.styled"

type EditableSpanProps = {
  value: string
  onChange: (newValue: string) => void
  disabled?: boolean
}

//todo: rewrite to react-hook-form
//–ù–µ —Ç–µ—Ä—è–µ—Ç –ª–∏ —É–Ω–µ–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ ????
export function EditableSpan(props: EditableSpanProps) {
  const { value, onChange, disabled } = props
  const [editableMode, setEditableMode] = useState<boolean>(false)
  const [inputItemText, setInputItemText] = useState(value)

  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    setInputItemText(e.target.value)
  }

  const exitEditableMod = () => {
    if (inputItemText.trim().length !== 0) {
      onChange(inputItemText)
      setInputItemText(inputItemText.trim())
    }
    setEditableMode(false)
  }

  const addItemOnKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      if (inputItemText.trim().length !== 0) {
        onChange(inputItemText)
        setInputItemText(inputItemText.trim())
      }
      setEditableMode(false)
    }
  }

  const doubleClickHandler = () => {
    if (disabled === false) {
      setEditableMode(true)
    }
  }

  return editableMode ? (
    <StyledInput
      onChange={onChangeHandler}
      fullWidth
      variant="filled"
      size={"small"}
      onBlur={exitEditableMod}
      autoFocus={true}
      onKeyUp={addItemOnKeyUpHandler}
      value={inputItemText}
      disabled={disabled}
    />
  ) : (
    <StyledSpan onDoubleClick={doubleClickHandler}>{value}</StyledSpan>
  )
}


üìÅ common\components\ErrorSnackbar
----------------------------------------

üìÑ common\components\ErrorSnackbar\ErrorSnackbar.tsx
==============================
import Snackbar, { SnackbarCloseReason } from "@mui/material/Snackbar"
import Alert from "@mui/material/Alert"
import { SyntheticEvent } from "react"
import { AppDispatch } from "app/store"
import { setAppError } from "app/model/appSlice"

type Props = {
  error: string | null
  dispatch: AppDispatch
}

export default function ErrorSnackbar(props: Props) {
  const handleClose = (_: SyntheticEvent | Event, reason?: SnackbarCloseReason) => {
    if (reason === "clickaway") {
      return
    }
    props.dispatch(setAppError({ error: null }))
  }

  return (
    <div>
      <Snackbar open={props.error !== null} autoHideDuration={4000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="error" variant="filled" sx={{ width: "100%" }}>
          {props.error}
        </Alert>
      </Snackbar>
    </div>
  )
}


üìÅ common\components\Header
----------------------------------------

üìÑ common\components\Header\Header.styled.ts
==============================
import styled from "styled-components"
import AppBar from "@mui/material/AppBar"

export const StyledAppBar = styled(AppBar)`
  width: 100%;

  button {
    color: ${({ theme }) => theme.palette.text.secondary};
    font-weight: 600;
    font-size: 15px;
  }

  button:hover {
    background-color: ${({ theme }) => theme.palette.action.hover};
  }
`


üìÑ common\components\Header\Header.tsx
==============================
import Toolbar from "@mui/material/Toolbar"
import IconButton from "@mui/material/IconButton"
import MenuIcon from "@mui/icons-material/Menu"
import Button from "@mui/material/Button"
import { ButtonSwitchTheme } from "common/components"
import React from "react"
import { StyledAppBar } from "./Header.styled"
import LinearProgress from "@mui/material/LinearProgress"
import { useAppSelector } from "common/hooks"
import { selectIsLoggedIn, selectStatus, setAppError, setIsLoggedIn } from "app/model/appSlice"
import { useLogoutMutation } from "../../../features/auth/api/authApi"
import { ResultCode } from "common/types/enums"
import { useDispatch } from "react-redux"
import { AUTH_TOKEN } from "common/constants"
import { baseApi } from "app/baseApi"

export const Header = () => {
  const [logout] = useLogoutMutation()
  const dispatch = useDispatch()

  const logoutHandler = () => {
    logout()
      .then((res) => {
        if (res.data?.resultCode === ResultCode.Success) {
          dispatch(setIsLoggedIn({ isLoggedIn: false }))
          localStorage.removeItem(AUTH_TOKEN)
          // dispatch(baseApi.util.resetApiState())
        }
      })
      .then(() => {
        dispatch(baseApi.util.invalidateTags(["Todolist", "Task"]))
      })
  }

  const status = useAppSelector(selectStatus)
  const isLoggedIn = useAppSelector(selectIsLoggedIn)

  return (
    <StyledAppBar position={"static"}>
      <Toolbar sx={{ display: "flex", justifyContent: "space-between" }}>
        <IconButton color="inherit">
          <MenuIcon />
        </IconButton>
        <div>
          {isLoggedIn && <Button onClick={logoutHandler}>Logout</Button>}
          <Button color="inherit">Faq</Button>
          <Button color="inherit" onClick={() => dispatch(setAppError({ error: "test error" }))}>
            add error
          </Button>{" "}
          <Button color="inherit" onClick={() => dispatch(setAppError({ error: null }))}>
            delete error
          </Button>
          <ButtonSwitchTheme />
        </div>
      </Toolbar>
      {status === "loading" && <LinearProgress sx={{ height: 3 }} color="inherit" />}
    </StyledAppBar>
  )
}


üìÅ common\components\Page404
----------------------------------------

üìÑ common\components\Page404\Page404.styled.ts
==============================
import styled from "styled-components"

export const Title = styled.h2`
  margin: 0;
  text-align: center;
  font-size: 250px;
`

export const SubTitle = styled.h2`
  text-align: center;
  font-size: 50px;
  margin: 0;
  text-transform: uppercase;
`


üìÑ common\components\Page404\Page404.tsx
==============================
import { Path } from "common/routing"
import Button from "@mui/material/Button"
import KeyboardReturnIcon from "@mui/icons-material/KeyboardReturn"
import { SubTitle, Title } from "common/components/Page404/Page404.styled"

export const Page404 = () => {
  return (
    <>
      <Title>404</Title>
      <SubTitle>page not found</SubTitle>
      <Button href={Path.Main} variant="outlined" startIcon={<KeyboardReturnIcon />}>
        –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      </Button>
    </>
  )
}


üìÅ common\constants
----------------------------------------

üìÑ common\constants\constants.ts
==============================
export const AUTH_TOKEN = "auth-token"
export const PAGE_SIZE = 4


üìÑ common\constants\index.ts
==============================
export * from "./constants"


üìÅ common\hooks
----------------------------------------

üìÑ common\hooks\index.ts
==============================
export * from "./useAppDispatch"
export * from "./useAppSelector"


üìÑ common\hooks\useAppDispatch.ts
==============================
import { useDispatch } from "react-redux"
import { AppDispatch } from "app/store"

export const useAppDispatch = useDispatch.withTypes<AppDispatch>()


üìÑ common\hooks\useAppSelector.ts
==============================
import { useSelector } from "react-redux"
import { RootState } from "app/store"

export const useAppSelector = useSelector.withTypes<RootState>()


üìÅ common\lib
----------------------------------------

üìÅ common\lib\instance
----------------------------------------

üìÑ common\lib\instance\index.ts
==============================
export * from "./instance"


üìÑ common\lib\instance\instance.ts
==============================
import axios from "axios"
//–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø–∞–∫–æ–≤–∞—Ç—å baseUrl –∏ headers +–º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â–µ
export const instance = axios.create({
  baseURL: process.env.REACT_APP_BASE_URL,
  headers: {
    "API-KEY": process.env.REACT_APP_API_KEY,
  },
})

//–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–∑–≤–∞–ª—è–µ—Ç –¥–æ-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
//–ü—Ä–µ–¥–Ω–æ–∑–Ω–∞–µ–Ω –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤! –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è –≤—ã—á–ª–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º
//–ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é if else, –Ω–æ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ —Ç–∞–∫ –¥–µ–ª–∞–µ—é—Ç —Ä–µ–¥–∫–æ
instance.interceptors.request.use(function (config) {
  // Do something before request is sent
  config.headers.Authorization = `Bearer ${localStorage.getItem("auth-token")}`
  return config
})


üìÅ common\lib\theme
----------------------------------------

üìÑ common\lib\theme\getTheme.ts
==============================
import { createTheme } from "@mui/material/styles"
import { ThemeMode } from "common/utils/theme/themeUtils"

export const lightThemePalette = {
  primary: {
    // main: "linear-gradient(90deg, #4facfe 0%, #00f2fe 100%)", // –ì—Ä–∞–¥–∏–µ–Ω—Ç –≥–æ–ª—É–±–æ–≥–æ
    main: "#251f54",
    contrastText: "#ffffff", // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
  },
  secondary: {
    main: "#00a3b0", // –Ø—Ä–∫–∏–π —Ä–æ–∑–æ–≤—ã–π
    contrastText: "#ffffff", // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
  },
  background: {
    default: "#f9f9f9", // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π
    paper: "#ffffff", // –ë–µ–ª—ã–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  },
  text: {
    primary: "#2c2c2c", // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    secondary: "#757575", // –ú—è–≥–∫–∏–π —Å–µ—Ä—ã–π –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  },
  action: {
    hover: "rgba(79, 172, 254, 0.1)", // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    selected: "rgba(255, 126, 179, 0.15)", // –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–±–æ—Ä–∞
    disabled: "rgba(0, 0, 0, 0.26)", // –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    disabledBackground: "rgba(0, 0, 0, 0.12)", // –§–æ–Ω –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    focus: "rgba(0, 0, 0, 0.12)", // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  },
}

export const darkThemePalette = {
  primary: {
    main: "#2575fc", // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏ —Å–∏–Ω–µ–≥–æ
    contrastText: "#ffffff", // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
  },
  secondary: {
    main: "#01aab9", // –ú—è–≥–∫–∏–π –ø–µ—Ä—Å–∏–∫–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
    contrastText: "#000000", // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
  },
  background: {
    default: "#121212", // –ì–ª—É–±–æ–∫–∏–π —Ç–µ–º–Ω—ã–π
    paper: "#1f1f1f", // –ß—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  },
  text: {
    primary: "#e0e0e0", // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    secondary: "#a0a0a0", // –ú—è–≥–∫–∏–π —Å–µ—Ä—ã–π
  },
  action: {
    hover: "rgba(106, 17, 203, 0.1)", // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    selected: "rgba(255, 154, 158, 0.15)", // –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–±–æ—Ä–∞
    disabled: "rgba(0, 0, 0, 0.26)", // –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    disabledBackground: "rgba(0, 0, 0, 0.12)", // –§–æ–Ω –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    focus: "rgba(0, 0, 0, 0.12)", // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  },
}

export const getTheme = (mode: ThemeMode) => {
  return createTheme({
    palette: {
      mode,
      ...(mode === "light" ? lightThemePalette : darkThemePalette),
    },
  })
}


üìÑ common\lib\theme\index.ts
==============================
export * from "./getTheme"


üìÅ common\routing
----------------------------------------

üìÑ common\routing\index.ts
==============================
export * from "./routing"


üìÑ common\routing\protectedRoute.tsx
==============================
import React from "react"
import { Outlet, useNavigate } from "react-router"

type Props = {
  isAuthenticated: boolean
  path: string
}

const ProtectedRoute = ({ isAuthenticated, path }: Props) => {
  const navigate = useNavigate()

  React.useEffect(() => {
    if (!isAuthenticated) {
      navigate(path, { replace: true })
    }
  }, [isAuthenticated, navigate])

  return isAuthenticated ? (
    <>
      <Outlet />
    </>
  ) : null
}

export default ProtectedRoute


üìÑ common\routing\routing.tsx
==============================
import React from "react"
import { Route, Routes } from "react-router"
import { Login } from "../../features/auth/ui/Login/Login"
import { Main } from "app/Main"
import { Page404 } from "common/components/Page404/Page404"
import ProtectedRoute from "common/routing/protectedRoute"
import { useAppSelector } from "common/hooks"
import { selectIsLoggedIn } from "app/model/appSlice"

export const Path = {
  Main: "/",
  Login: "login",
  NotFound: "*",
} as const

export const Routing = () => {
  const isLoggedIn = useAppSelector(selectIsLoggedIn)

  return (
    <Routes>
      {/* –û—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Route path={Path.Login} element={<Login />} />
      <Route path={Path.NotFound} element={<Page404 />} />

      {/* –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Route element={<ProtectedRoute isAuthenticated={isLoggedIn} path={Path.Login} />}>
        <Route path={Path.Main} element={<Main />} />
      </Route>
    </Routes>
  )
}

// <Router>
//   <Routes>
//     {/* –û—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
//     <Route path="/login" element={<LoginPage />} />
//
//     {/* –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
//     <Route element={<ProtectedRoute isAuthenticated={isAuthenticated} />}>
//       <Route path="/dashboard" element={<Dashboard />} />
//       <Route path="/profile" element={<Profile />} />
//     </Route>
//   </Routes>
// </Router>


üìÅ common\styles
----------------------------------------

üìÑ common\styles\container.styles.ts
==============================
import { SxProps } from "@mui/material"

export const containerSx: SxProps = {
  display: "flex",
  justifyContent: "space-between",
}


üìÑ common\styles\index.ts
==============================
export { containerSx } from "./container.styles"


üìÅ common\types
----------------------------------------

üìÑ common\types\all.types.ts
==============================
export type FieldError = {
  error: string
  field: string
}

export type BaseResponse<D = {}> = {
  resultCode: number
  messages: string[]
  fieldsErrors: FieldError[]
  data: D
}


üìÑ common\types\index.ts
==============================
export * from "./all.types"


üìÅ common\types\enums
----------------------------------------

üìÑ common\types\enums\enums.ts
==============================
export enum TaskStatus {
  New = 0,
  InProgress = 1,
  Complete = 2,
  Draft = 3,
}

export enum TaskPriority {
  Low = 0,
  Middle = 1,
  Hi = 2,
  Urgently = 3,
  Latter = 4,
}

export enum ResultCode {
  Success = 0,
  Error = 1,
  CaptchaError = 10,
}

export enum RequestStatus {
  idle = "idle",
  loading = "loading",
  succeeded = "succeeded",
  failed = "failed",
}


üìÑ common\types\enums\index.ts
==============================
export * from "./enums"


üìÅ common\utils
----------------------------------------

üìÑ common\utils\index.ts
==============================
export * from "./error/isErrorWithMessage"
export * from "./error/handleError"
// export * from "./_oldhadleerror/errorMiddleware"


üìÅ common\utils\error
----------------------------------------

üìÑ common\utils\error\handleError.ts
==============================
import { isErrorWithMessage } from "common/utils"
import { BaseQueryApi, FetchBaseQueryError, FetchBaseQueryMeta, QueryReturnValue } from "@reduxjs/toolkit/query/react"
import { setAppError } from "app/model/appSlice"
import { ResultCode } from "common/types/enums"

export const handleError = (
  api: BaseQueryApi,
  result: QueryReturnValue<unknown, FetchBaseQueryError, FetchBaseQueryMeta>,
) => {
  let error = "Some error occurred"

  if (result.error) {
    switch (result.error.status) {
      case "FETCH_ERROR":
      case "PARSING_ERROR":
      case "CUSTOM_ERROR":
        error = result.error.error
        break
      case 403:
        error = "403 Forbidden Error. Check API-KEY"
        break
      case 400:
      case 500:
        if (isErrorWithMessage(result.error.data)) {
          error = result.error.data.message
        } else {
          error = JSON.stringify(result.error.data)
        }
        break
      default:
        error = JSON.stringify(result.error)
        break
    }
    api.dispatch(setAppError({ error }))
  }

  if ((result.data as { resultCode: ResultCode }).resultCode === ResultCode.Error) {
    const messages = (result.data as { messages: string[] }).messages
    error = messages.length ? messages[0] : error
    api.dispatch(setAppError({ error }))
  }
}


üìÑ common\utils\error\isErrorWithMessage.ts
==============================
export function isErrorWithMessage(error: unknown): error is { message: string } {
  return (
    typeof error === "object" && // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ error ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    error != null && // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ null
    "message" in error && // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ 'message'
    typeof (error as any).message === "string" // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
  )
}


üìÅ common\utils\theme
----------------------------------------

üìÑ common\utils\theme\themeUtils.ts
==============================
export type ThemeMode = "light" | "dark"

export const getInitialThemeMode = (): ThemeMode => {
  const stored = localStorage.getItem("theme")
  return stored === "dark" || stored === "light" ? stored : "light"
}


üìÅ common\utils\_oldhadleerror
----------------------------------------

üìÑ common\utils\_oldhadleerror\errorMiddleware.js
==============================
// import { toast } from "react-toastify"
//
// export const errorMiddleware = (store) => (next) => (action) => {
//   if (action.type.endsWith("/rejected")) {
//     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞:", action.error)
//
//     // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É toast:
//     toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + action.error.message)
//   }
//
//   // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–ª—å—à–µ
//   return next(action)
// }


üìÑ common\utils\_oldhadleerror\handleServerAppError.ts
==============================
import { BaseResponse } from "common/types"
import { setAppError, setAppStatus } from "app/model/appSlice"
import { RequestStatus } from "common/types/enums"
import { AppDispatch } from "app/store"

export const handleServerAppError = <T>(data: BaseResponse<T>, dispatch: AppDispatch) => {
  if (data.messages.length) {
    dispatch(setAppError({ error: data.messages[0] }))
  } else {
    dispatch(setAppError({ error: "Some error occurred" }))
  }
  dispatch(setAppStatus({ status: RequestStatus.failed }))
}


üìÑ common\utils\_oldhadleerror\handleServerNetworkError.ts
==============================
import { Dispatch } from "redux"
import { setAppError, setAppStatus } from "app/model/appSlice"
import { RequestStatus } from "common/types/enums"

export const handleServerNetworkError = (error: unknown, dispatch: Dispatch) => {
  if (error instanceof Error) {
    dispatch(setAppError({ error: error.message }))
  } else if (typeof error === "object" && error !== null && "message" in error) {
    dispatch(setAppError({ error: (error as { message: string }).message }))
  } else {
    dispatch(setAppError({ error: "Unknown error occurred" }))
  }
  dispatch(setAppStatus({ status: RequestStatus.failed }))
}


üìÅ features
----------------------------------------

üìÅ features\auth
----------------------------------------

üìÅ features\auth\api
----------------------------------------

üìÑ features\auth\api\authApi.ts
==============================
import { BaseResponse } from "common/types"
import { baseApi } from "app/baseApi"
import { LoginArgs } from "./authApi.types"

export const authApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    me: build.query<BaseResponse<{ id: number; email: string; login: string }>, void>({
      query: () => "auth/me",
    }),
    login: build.mutation<BaseResponse<{ userId: number; token: string }>, LoginArgs>({
      query: (body) => ({
        url: "auth/login",
        method: "POST",
        body,
      }),
    }),
    logout: build.mutation<BaseResponse, void>({
      query: () => ({
        url: "auth/login",
        method: "DELETE",
      }),
    }),
  }),
})

export const { useMeQuery, useLoginMutation, useLogoutMutation } = authApi


üìÑ features\auth\api\authApi.types.ts
==============================
export type LoginArgs = {
  email: string
  password: string
  rememberMe?: boolean
  captcha?: string
}


üìÅ features\auth\ui
----------------------------------------

üìÅ features\auth\ui\Login
----------------------------------------

üìÑ features\auth\ui\Login\Login.tsx
==============================
import Button from "@mui/material/Button"
import Checkbox from "@mui/material/Checkbox"
import FormControl from "@mui/material/FormControl"
import FormControlLabel from "@mui/material/FormControlLabel"
import FormGroup from "@mui/material/FormGroup"
import FormLabel from "@mui/material/FormLabel"
import Grid from "@mui/material/Grid2"
import TextField from "@mui/material/TextField"
import { useAppDispatch, useAppSelector } from "common/hooks"
import { getTheme } from "common/lib/theme"
import styled from "styled-components"
import { Controller, SubmitHandler, useForm } from "react-hook-form"
import { useEffect } from "react"
import { useNavigate } from "react-router"
import { Path } from "common/routing"
import { selectIsLoggedIn, selectThemeMode, setIsLoggedIn } from "app/model/appSlice"
import { useLoginMutation } from "../../api/authApi"
import { AUTH_TOKEN } from "common/constants"
import { ResultCode } from "common/types/enums"

export type Inputs = {
  email: string
  password: string
  rememberMe: boolean
}

const rememberEmail = localStorage.getItem("rememberEmail") || "free@samuraijs.com"

const defaultFormValues: Inputs = {
  email: rememberEmail,
  password: "",
  rememberMe: false,
}

export const Login = () => {
  const [login] = useLoginMutation()
  const themeMode = useAppSelector(selectThemeMode)
  const theme = getTheme(themeMode)
  const dispatch = useAppDispatch()
  const isLoggedIn = useAppSelector(selectIsLoggedIn)
  let navigate = useNavigate()

  const {
    register,
    handleSubmit,
    reset,
    control,
    formState: { errors },
  } = useForm<Inputs>({
    defaultValues: defaultFormValues,
  })

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ rememberMe –∏–∑ localStorage
  useEffect(() => {
    const remember = localStorage.getItem("rememberMe") === "true"
    if (remember) {
      reset({ ...defaultFormValues, rememberMe: true })
    }
  }, [reset])

  useEffect(() => {
    if (isLoggedIn) {
      navigate(Path.Main)
    }
  }, [isLoggedIn, navigate])

  const onSubmit: SubmitHandler<Inputs> = (data) => {
    login(data).then((res) => {
      if (res.data?.resultCode === ResultCode.Success) {
        dispatch(setIsLoggedIn({ isLoggedIn: true }))
        localStorage.setItem(AUTH_TOKEN, res.data.data.token)
        if (data.rememberMe) {
          localStorage.setItem("rememberMe", data.rememberMe.toString())
          localStorage.setItem("rememberEmail", data.email)
        } else if (!data.rememberMe) {
          localStorage.removeItem("rememberMe")
          localStorage.removeItem("rememberEmail")
        }
        reset({ password: "" })
      }
    })
  }

  return (
    <Grid container justifyContent={"center"}>
      <Grid justifyContent={"center"}>
        <FormControl>
          <FormLabel>
            <p>
              To login get registered
              <a
                style={{ color: theme.palette.text.primary, marginLeft: "5px" }}
                href={"https://social-network.samuraijs.com/"}
                target={"_blank"}
                rel="noreferrer"
              >
                here
              </a>
            </p>
            <p>or use common test account credentials:</p>
            <p>
              <b>Email:</b> free@samuraijs.com
            </p>
            <p>
              <b>Password:</b> free
            </p>
          </FormLabel>

          <form onSubmit={handleSubmit(onSubmit)}>
            <FormGroup>
              <TextField
                label="Email"
                margin="normal"
                {...register("email", {
                  required: "Email is required",
                  pattern: {
                    value: /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
                    message: "Incorrect email address",
                  },
                })}
              />
              {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}

              <TextField
                type="password"
                label="Password"
                margin="normal"
                {...register("password", {
                  required: "Password is required",
                  minLength: {
                    value: 3,
                    message: "Password must be at least 3 characters long",
                  },
                })}
              />
              {errors.password && <ErrorMessage>{errors.password.message}</ErrorMessage>}
              <FormControlLabel
                sx={{ color: theme.palette.primary.contrastText }}
                label={"Remember me"}
                control={
                  <Controller
                    name={"rememberMe"}
                    control={control}
                    render={({ field: { onChange, value } }) => (
                      <Checkbox
                        onChange={(e) => {
                          const checked = e.target.checked
                          onChange(checked)
                        }}
                        checked={value}
                      />
                    )}
                  />
                }
              />
              <Button type={"submit"} variant={"contained"} color={"primary"}>
                Login
              </Button>
            </FormGroup>
          </form>
        </FormControl>
      </Grid>
    </Grid>
  )
}

const ErrorMessage = styled.span`
  color: red;
  font-size: 14px;
`


üìÅ features\todolists
----------------------------------------

üìÅ features\todolists\api
----------------------------------------

üìÑ features\todolists\api\tasksApi.ts
==============================
import { BaseResponse } from "common/types/all.types"
import { DomainTask, GetTasksResponse, ResponseTask, UpdateTaskDomainModel } from "./tasksApi.types"
import { baseApi } from "app/baseApi"
import { RequestStatus } from "common/types/enums"
import { PAGE_SIZE } from "common/constants"

export const tasksApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    getTasks: build.query<GetTasksResponse<DomainTask>, { todolistId: string; params: { page: number } }>({
      query: ({ todolistId, params }) => ({
        url: `todo-lists/${todolistId}/tasks`,
        params: { ...params, count: PAGE_SIZE },
      }),
      transformResponse: (res: GetTasksResponse<ResponseTask>): GetTasksResponse<DomainTask> => ({
        error: res.error,
        totalCount: res.totalCount,
        items: res.items.map((task) => ({
          ...task,
          entityStatus: RequestStatus.idle,
        })),
      }),
      providesTags: (_res, _error, { todolistId }, _meta) => [{ type: "Task", id: todolistId }],
    }),
    createTask: build.mutation<BaseResponse<{ item: ResponseTask }>, { title: string; todolistId: string }>({
      query: (payload) => ({
        url: `todo-lists/${payload.todolistId}/tasks`,
        method: "POST",
        body: payload,
      }),
      invalidatesTags: (_result, _error, { todolistId }, _meta) => [{ type: "Task", id: todolistId }],
    }),
    deleteTask: build.mutation<BaseResponse, { todolistId: string; taskId: string }>({
      query: (payload) => ({
        url: `todo-lists/${payload.todolistId}/tasks/${payload.taskId}`,
        method: "DELETE",
      }),
      invalidatesTags: (_result, _error, { todolistId }, _meta) => [{ type: "Task", id: todolistId }],
    }),
    updateTask: build.mutation<
      BaseResponse<{ item: ResponseTask }>,
      { todolistId: string; taskId: string; model: UpdateTaskDomainModel; page: number }
    >({
      query(payload) {
        const { todolistId, taskId, model } = payload
        return {
          url: `todo-lists/${todolistId}/tasks/${taskId}`,
          method: "PUT",
          body: model,
        }
      },
      invalidatesTags: (_result, _error, { todolistId }, _meta) => [{ type: "Task", id: todolistId }],
      onQueryStarted: async (payload, { dispatch, queryFulfilled }) => {
        const patchResult = dispatch(
          tasksApi.util.updateQueryData(
            "getTasks",
            { todolistId: payload.todolistId, params: { page: payload.page } },
            (state) => {
              const tasks = state.items
              const index = tasks.findIndex((el) => el.id === payload.taskId)
              if (index !== -1) {
                tasks[index] = { ...tasks[index], ...payload.model }
              }
            },
          ),
        )
        try {
          await queryFulfilled
        } catch (error) {
          patchResult.undo()
        }
      },
    }),
  }),
})

export const { useGetTasksQuery, useCreateTaskMutation, useDeleteTaskMutation, useUpdateTaskMutation } = tasksApi


üìÑ features\todolists\api\tasksApi.types.ts
==============================
import { RequestStatus, TaskPriority, TaskStatus } from "common/types/enums"

export type GetTasksResponse<T> = {
  error: string | null
  totalCount: number
  items: T[]
}

export type ResponseTask = {
  description: string
  title: string
  status: TaskStatus
  priority: TaskPriority
  startDate: string
  deadline: string
  id: string
  todoListId: string
  order: number
  addedDate: string
}

export type DomainTask = {
  description: string
  title: string
  status: TaskStatus
  priority: TaskPriority
  startDate: string
  deadline: string
  id: string
  todoListId: string
  order: number
  addedDate: string
  entityStatus: RequestStatus
}

export type UpdateTaskModel = {
  title: string
  description: string
  status: TaskStatus
  priority: TaskPriority
  startDate: string
  deadline: string
}

export type UpdateTaskDomainModel = {
  title?: string
  description?: string
  status?: TaskStatus
  priority?: TaskPriority
  startDate?: string
  deadline?: string
  entityStatus?: RequestStatus
}


üìÑ features\todolists\api\todolistsApi.ts
==============================
import { BaseResponse } from "common/types/all.types"
import { TodolistResponse } from "./todolistsApi.types"
import { RequestStatus } from "common/types/enums"
import { baseApi } from "app/baseApi"
import { DomainTodolist } from "common/actions/common.actions"

// `createApi` - —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ `RTK Query`, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç `API`
// –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ `API` –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const todolistsApi = baseApi.injectEndpoints({
  // `endpoints` - –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏ –¥–ª—è `API`, –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏
  // —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ `API`
  // (–Ω–∞–ø—Ä–∏–º–µ—Ä `get`, `post`, `put`, `patch`, `delete`)
  endpoints: (build) => ({
    // –¢–∏–ø–∏–∑–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (<–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø, —Ç–∏–ø query –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (`QueryArg`)>)
    // `query` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å `get` –∏ —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    getTodolists: build.query<DomainTodolist[], void>({
      query: () => "todo-lists",
      transformResponse: (todolists: TodolistResponse[]): DomainTodolist[] =>
        todolists.map((todolists) => ({
          ...todolists,
          filter: "all",
          entityStatus: RequestStatus.idle,
        })),
      providesTags: ["Todolist"],
    }),

    createTodolist: build.mutation<BaseResponse<{ item: TodolistResponse }>, { title: string }>({
      query: (payload) => ({
        url: "todo-lists",
        method: "POST",
        body: payload,
      }),
      invalidatesTags: ["Todolist"],
    }),

    removeTodolist: build.mutation<BaseResponse, { todolistId: string }>({
      onQueryStarted: async (payload, { dispatch, queryFulfilled }) => {
        const patchResult = dispatch(
          todolistsApi.util.updateQueryData("getTodolists", undefined, (state) => {
            const index = state.findIndex((el) => el.id === payload.todolistId)
            if (index !== -1) {
              state.splice(index, 1)
            }
          }),
        )
        try {
          await queryFulfilled
        } catch (error) {
          patchResult.undo()
        }
      },
      query: (payload) => ({
        url: `todo-lists/${payload.todolistId}`,
        method: "DELETE",
      }),
      invalidatesTags: ["Todolist"],
    }),

    updateTodolistTitle: build.mutation<
      BaseResponse<{ item: TodolistResponse }>,
      { title: string; todolistId: string }
    >({
      query: (payload) => ({
        url: `todo-lists/${payload.todolistId}`,
        method: "PUT",
        body: payload,
      }),
      invalidatesTags: ["Todolist"],
    }),
  }),
})

// `createApi` —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç `API`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ö—É–∫–æ–≤,
// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–µ `endpoints`
export const {
  useGetTodolistsQuery,
  useCreateTodolistMutation,
  useRemoveTodolistMutation,
  useUpdateTodolistTitleMutation,
} = todolistsApi

//–ú–æ–¥—É–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
// export const _todolistsApi = {
//   updateTodolist(payload: { id: string; title: string }) {
//     //–ü—Ä–∏ —Ç–∞–∫–æ–º —É–ø–∞–∫–æ–≤—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –º—ã –Ω–µ –æ—à–∏–±–µ–º—Å—è
//     //–≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–µ—Ä–µ–¥–∞—á–∏
//     const { id, title } = payload
//     return instance.put<BaseResponse>(`todo-lists/${id}`, { title })
//   },
//
//   createTodolist(title: string) {
//     return instance.post<BaseResponse<{ item: TodolistResponse }>>("todo-lists", { title })
//   },
//
//   removeTodolist(id: string) {
//     return instance.delete<BaseResponse>(`todo-lists/${id}`)
//   },
//
//   getTodolists() {
//     return instance.get<TodolistResponse[]>("todo-lists")
//   },
// }


üìÑ features\todolists\api\todolistsApi.types.ts
==============================
export type TodolistResponse = {
  id: string
  title: string
  addedDate: string
  order: number
}


üìÅ features\todolists\model
----------------------------------------

üìÅ features\todolists\model\mockData
----------------------------------------

üìÑ features\todolists\model\mockData\mock-data.ts
==============================
import { RequestStatus } from "common/types/enums"
import { DomainTask } from "../../api/tasksApi.types"
import { DomainTodolist } from "common/actions/common.actions"

export type MocTasks = {
  [todolistId: string]: DomainTask[]
}

export const mockDataTasks: MocTasks = {
  ["todolistId1"]: [
    {
      description: "string",
      title: "0",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "1",
      todoListId: "todolistId1",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
    {
      description: "string",
      title: "1",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "2",
      todoListId: "todolistId1",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
    {
      title: "2",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "3",
      todoListId: "todolistId1",
      description: "string",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
  ],
  ["todolistId2"]: [
    {
      description: "string",
      title: "0",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "1",
      todoListId: "todolistId1",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
    {
      description: "string",
      title: "1",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "2",
      todoListId: "todolistId1",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
    {
      description: "string",
      title: "2",
      status: 0,
      priority: 0,
      startDate: "string",
      deadline: "string",
      id: "3",
      todoListId: "todolistId1",
      order: -1,
      addedDate: "string",
      entityStatus: RequestStatus.idle,
    },
  ],
}

export const newTaskData = {
  description: "string",
  title: "hello world",
  status: 0,
  priority: 0,
  startDate: "string",
  deadline: "string",
  id: "4",
  todoListId: "todolistId1",
  order: -1,
  addedDate: "string",
}

export const todolistData: DomainTodolist = {
  id: "oneTodo",
  title: "oldTodo",
  addedDate: "00.11.23",
  order: -1,
  filter: "all",
  entityStatus: RequestStatus.idle,
}

export const todolistsData: DomainTodolist[] = [
  {
    id: "v1",
    title: "oldTod1",
    addedDate: "00.11.23",
    order: -1,
    filter: "all",
    entityStatus: RequestStatus.idle,
  },
  {
    id: "v2",
    title: "oldTodo2",
    addedDate: "00.11.23",
    order: -1,
    filter: "all",
    entityStatus: RequestStatus.idle,
  },
]


üìÅ features\todolists\ui
----------------------------------------

üìÅ features\todolists\ui\Todolists
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolists.tsx
==============================
import React from "react"
import { Todolist } from "./Todolist/Todolist"
import Grid from "@mui/material/Grid2"
import { useGetTodolistsQuery } from "../../api/todolistsApi"
import { TodolistSkeleton } from "./TodolistSkeleton/TodolistSkeleton"

export function Todolists() {
  const { data: todolists, isLoading } = useGetTodolistsQuery()

  const viewTodolist = () =>
    isLoading
      ? [...Array(6)].map((_, id) => <TodolistSkeleton key={id} />)
      : todolists?.map((t) => <Todolist key={t.id} todolist={t} />)

  return (
    <Grid gap={4} container rowSpacing={8} columns={{ xs: 4, sm: 8, md: 12 }} sx={{ padding: "0 60px" }}>
      {viewTodolist()}
    </Grid>
  )
}


üìÅ features\todolists\ui\Todolists\Todolist
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\Todolist.styled.ts
==============================
import styled from "styled-components"
import Paper from "@mui/material/Paper"

export const StyledPaper = styled(Paper)(() => ({
  maxWidth: 360,
}))


üìÑ features\todolists\ui\Todolists\Todolist\Todolist.tsx
==============================
import React from "react"
import { Tasks } from "./Tasks/Tasks"
import { AddItemForm } from "common/components"
import { FilterTasksButtons } from "./FilterTasksButtons/FilterTasksButtons"
import { StyledPaper } from "./Todolist.styled"
import { TodolistTitle } from "./TodolistTitle/TodolistTitle"
import { useCreateTaskMutation } from "../../../api/tasksApi"
import { DomainTodolist } from "common/actions/common.actions"

export function Todolist({ todolist }: Props) {
  const [createTask] = useCreateTaskMutation()
  const addTask = (title: string) => {
    createTask({ title, todolistId: todolist.id })
  }

  return (
    <StyledPaper elevation={5} square={false} sx={{ padding: "1rem" }}>
      <TodolistTitle todolist={todolist} />
      <AddItemForm addItem={addTask} disabled={todolist.entityStatus === "loading"} />
      <Tasks todolist={todolist} />
      <FilterTasksButtons id={todolist.id} filter={todolist.filter} />
    </StyledPaper>
  )
}

type Props = {
  todolist: DomainTodolist
}

export type FilterValue = "all" | "completed" | "active"


üìÅ features\todolists\ui\Todolists\Todolist\FilterTasksButtons
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\FilterTasksButtons\FilterTasksButtons.tsx
==============================
import React, { SyntheticEvent, useState } from "react"
import BottomNavigation from "@mui/material/BottomNavigation"
import BottomNavigationAction from "@mui/material/BottomNavigationAction"
import AllOutIcon from "@mui/icons-material/AllOut"
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank"
import CheckBoxIcon from "@mui/icons-material/CheckBox"
import { todolistsApi } from "../../../../api/todolistsApi"
import { useAppDispatch } from "common/hooks"

export type FilterType = "all" | "active" | "completed"

type Props = {
  id: string
  filter: FilterType
}

export function FilterTasksButtons({ filter, id }: Props) {
  const [value, setValue] = useState<FilterType>(filter)

  const dispatch = useAppDispatch()

  const handleChange = (_: SyntheticEvent, newValue: FilterType) => {
    // dispatch(updateTodolistFilter({ todolistId: id, filter: newValue }))
    dispatch(
      todolistsApi.util.updateQueryData(
        // –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        "getTodolists",
        // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        undefined,
        // `updateRecipe` - –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        (state) => {
          const todolist = state.find((tl) => tl.id === id)
          if (todolist) {
            todolist.filter = newValue
          }
        },
      ),
    )
    setValue(newValue)
  }

  return (
    <BottomNavigation sx={{ width: 340, borderRadius: 10 }} value={value} onChange={handleChange}>
      <BottomNavigationAction label="All" value="all" icon={<AllOutIcon />} />
      <BottomNavigationAction label="Active" value="active" icon={<CheckBoxOutlineBlankIcon />} />
      <BottomNavigationAction label="Completed" value="completed" icon={<CheckBoxIcon />} />
    </BottomNavigation>
  )
}


üìÅ features\todolists\ui\Todolists\Todolist\Tasks
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\Tasks\Tasks.styled.ts
==============================
import styled from "styled-components"

export const CircularContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 250px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏–ª–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª–∞ —Å–∂–∞—Ç–æ–π */
`

export const Container = styled.div`
  min-height: 250px; /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
  transition: max-height 0.3s ease; /* –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤—ã—Å–æ—Ç—ã */
`


üìÑ features\todolists\ui\Todolists\Todolist\Tasks\Tasks.tsx
==============================
import List from "@mui/material/List"
import { TaskStatus } from "common/types/enums"
import { Container } from "./Tasks.styled"
import { useGetTasksQuery } from "../../../../api/tasksApi"
import { DomainTodolist } from "common/actions/common.actions"
import { Task } from "./Task/Task"
import { useState } from "react"
import { TasksPagination } from "./TasksPagination/TasksPagination"
import { TasksSkeleton } from "./TasksSkeleton/TasksSkeleton"
import { PAGE_SIZE } from "common/constants"

type Props = {
  todolist: DomainTodolist
}

export function Tasks({ todolist }: Props) {
  const [page, setPage] = useState<number>(1)
  const { id, filter } = todolist

  const { data, isLoading, isFetching } = useGetTasksQuery({
    todolistId: id,
    params: { page },
  })

  let filteredTasks = data?.items

  if (filter === "active") {
    filteredTasks = filteredTasks?.filter((task) => task.status === TaskStatus.New)
  } else if (filter === "completed") {
    filteredTasks = filteredTasks?.filter((task) => task.status === TaskStatus.Complete)
  }

  // –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ isLoading
  if (isLoading) {
    return (
      <>
        <TasksSkeleton />
        <TasksSkeleton />
        <TasksSkeleton />
        <TasksSkeleton />
      </>
    )
  }

  let content

  if (data?.totalCount === 0) {
    content = <p>–ó–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!</p>
  } else if (data && data?.totalCount <= PAGE_SIZE) {
    content = (
      <List>
        {filteredTasks?.map((task) => (
          <Task key={task.id} task={task} todolistId={id} todoEntityStatus={todolist.entityStatus} page={page} />
        ))}
      </List>
    )
  } else {
    content = (
      <>
        <List>
          {filteredTasks?.map((task) => (
            <Task key={task.id} task={task} todolistId={id} todoEntityStatus={todolist.entityStatus} page={page} />
          ))}
        </List>
        <TasksPagination totalCount={data?.totalCount || 0} page={page} setPage={setPage} />
      </>
    )
  }

  return <Container>{content}</Container>
}


üìÅ features\todolists\ui\Todolists\Todolist\Tasks\Task
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\Tasks\Task\Task.styled.ts
==============================
import styled, { css } from "styled-components"

type StyledSpanProps = {
  isDone: boolean
}
export const SpanWrapper = styled.div<StyledSpanProps>`
  flex: 1 1 100%;
  opacity: ${(props) => (props.isDone ? "0.5" : "1")};
  position: relative;
  display: inline-block;
  max-width: fit-content;

  &::after {
    content: " ";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: ${({ theme }) => theme.palette.text.primary};
    transform-origin: left center;
    transform: scaleX(0);
    transition: transform 0.2s ease-in-out;
  }

  ${(props) =>
    props.isDone &&
    css`
      &::after {
        transform: scaleX(1);
      }
    `}
`


üìÑ features\todolists\ui\Todolists\Todolist\Tasks\Task\Task.tsx
==============================
import { ChangeEvent } from "react"
import Checkbox from "@mui/material/Checkbox"
import IconButton from "@mui/material/IconButton"
import DeleteIcon from "@mui/icons-material/Delete"
import ListItem from "@mui/material/ListItem"
import { SpanWrapper } from "./Task.styled"
import { EditableSpan } from "common/components/EditableSpan/EditableSpan"
import { RequestStatus, TaskStatus } from "common/types/enums"
import { DomainTask, UpdateTaskModel } from "../../../../../api/tasksApi.types"
import { useDeleteTaskMutation, useUpdateTaskMutation } from "../../../../../api/tasksApi"

type TaskProps = {
  task: DomainTask
  todolistId: string
  todoEntityStatus: RequestStatus
  page: number
}

export function Task({ todolistId, task, todoEntityStatus, page }: TaskProps) {
  const buildUpdatedModel = (updates: Partial<UpdateTaskModel>): UpdateTaskModel => ({
    title: task.title,
    status: task.status,
    deadline: task.deadline,
    description: task.description,
    priority: task.priority,
    startDate: task.startDate,
    ...updates,
  })

  const [deleteTask] = useDeleteTaskMutation()
  const [updateTask] = useUpdateTaskMutation()

  const removeTaskHandler = () => {
    deleteTask({ taskId: task.id, todolistId })
  }

  const changeTaskTitle = (title: string) => {
    const model = buildUpdatedModel({ title })
    updateTask({ todolistId, taskId: task.id, model, page })
  }

  const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {
    const newStatus = e.currentTarget.checked ? TaskStatus.Complete : TaskStatus.New
    const model = buildUpdatedModel({ status: newStatus })
    updateTask({ todolistId, taskId: task.id, model, page })
  }

  const isComplete = task.status === TaskStatus.Complete
  const isDisabled = task.entityStatus === "loading" || todoEntityStatus === "loading"

  return (
    <ListItem
      disableGutters
      disablePadding
      sx={{
        display: "flex",
        flexDirection: "row",
        alignItems: "center",
        maxWidth: "100%",
      }}
    >
      <Checkbox size="medium" checked={isComplete} onChange={changeTaskStatus} disabled={isDisabled} />
      <SpanWrapper isDone={isComplete}>
        <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={isDisabled} />
      </SpanWrapper>
      <IconButton aria-label="delete" onClick={removeTaskHandler} disabled={isDisabled}>
        <DeleteIcon />
      </IconButton>
    </ListItem>
  )
}


üìÅ features\todolists\ui\Todolists\Todolist\Tasks\TasksPagination
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\Tasks\TasksPagination\TasksPagination.styled.ts
==============================
import styled from "styled-components"
import Pagination from "@mui/material/Pagination"

export const StyledPagination = styled(Pagination)`
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
`

export const StyledTotalCount = styled.div`
  display: flex;
  justify-content: right;
  margin-right: 16px;
`


üìÑ features\todolists\ui\Todolists\Todolist\Tasks\TasksPagination\TasksPagination.tsx
==============================
import Typography from "@mui/material/Typography"
import { ChangeEvent } from "react"
import { PAGE_SIZE } from "common/constants"
import { StyledPagination, StyledTotalCount } from "./TasksPagination.styled"

type Props = {
  totalCount: number
  page: number
  setPage: (page: number) => void
}

export const TasksPagination = ({ totalCount, page, setPage }: Props) => {
  const changePage = (_: ChangeEvent<unknown>, page: number) => {
    setPage(page)
  }

  return (
    <>
      <StyledPagination
        count={Math.ceil(totalCount / PAGE_SIZE)}
        page={page}
        onChange={changePage}
        shape="rounded"
        color="primary"
      />
      <StyledTotalCount>
        <Typography variant="caption">Total: {totalCount}</Typography>
      </StyledTotalCount>
    </>
  )
}


üìÅ features\todolists\ui\Todolists\Todolist\Tasks\TasksSkeleton
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\Tasks\TasksSkeleton\TasksSkeleton.tsx
==============================
import Box from "@mui/material/Box"
import Skeleton from "@mui/material/Skeleton"
import { containerSx } from "common/styles"

export function TasksSkeleton() {
  return (
    <Box style={{ padding: "8px 0" }}>
      {[Array(4)].map((_, id) => (
        <Box key={id} sx={containerSx}>
          <Box sx={containerSx} style={{ gap: "15px" }}>
            <Skeleton width={20} height={40} />
            <Skeleton width={150} height={40} />
          </Box>
          <Skeleton width={20} height={40} />
        </Box>
      ))}
    </Box>
  )
}


üìÅ features\todolists\ui\Todolists\Todolist\TodolistTitle
----------------------------------------

üìÑ features\todolists\ui\Todolists\Todolist\TodolistTitle\TodolistTitle.tsx
==============================
import IconButton from "@mui/material/IconButton"
import DeleteIcon from "@mui/icons-material/Delete"
import { EditableSpan } from "common/components"
import { useRemoveTodolistMutation, useUpdateTodolistTitleMutation } from "../../../../api/todolistsApi"
import { DomainTodolist } from "common/actions/common.actions"

type Props = {
  todolist: DomainTodolist
}

export const TodolistTitle = ({ todolist }: Props) => {
  const [removeTodolist] = useRemoveTodolistMutation()
  const [updateTodolistTitle] = useUpdateTodolistTitleMutation()

  const updateTodoListTitle = (newTitle: string) => {
    updateTodolistTitle({ title: newTitle, todolistId: todolist.id })
  }

  const deleteTodolist = () => removeTodolist({ todolistId: todolist.id })

  return (
    <>
      <IconButton aria-label="delete" onClick={deleteTodolist} disabled={todolist.entityStatus === "loading"}>
        <DeleteIcon />
      </IconButton>
      <EditableSpan
        value={todolist.title}
        onChange={updateTodoListTitle}
        disabled={todolist.entityStatus === "loading"}
      />
    </>
  )
}


üìÅ features\todolists\ui\Todolists\TodolistSkeleton
----------------------------------------

üìÑ features\todolists\ui\Todolists\TodolistSkeleton\TodolistSkeleton.styled.ts
==============================
import Paper from "@mui/material/Paper"
import styled from "styled-components"

export const StyledPaper = styled(Paper)`
  width: 305px;
  padding: 10px 20px;
`

export const CommonWrapper = styled.div`
  display: flex;
  justify-content: space-between;
`

export const TitleWrapper = styled(CommonWrapper)`
  gap: 15px;
  align-items: center;
`

export const CreateItemFormWrapper = styled(CommonWrapper)`
  align-items: center;
`

export const TasksWrapper = styled(CommonWrapper)`
  gap: 15px;
`


üìÑ features\todolists\ui\Todolists\TodolistSkeleton\TodolistSkeleton.tsx
==============================
import Box from "@mui/material/Box"
import Skeleton from "@mui/material/Skeleton"
import { containerSx } from "common/styles"
import { CreateItemFormWrapper, StyledPaper, TasksWrapper, TitleWrapper } from "./TodolistSkeleton.styled"

export function TodolistSkeleton() {
  return (
    <StyledPaper>
      <TitleWrapper>
        <Skeleton width={150} height={50} />
        <Skeleton width={20} height={40} />
      </TitleWrapper>
      <CreateItemFormWrapper>
        <Skeleton width={230} height={60} />
        <Skeleton width={20} height={40} />
      </CreateItemFormWrapper>
      {Array(4)
        .fill(null)
        .map((_, id) => (
          <Box key={id} sx={containerSx}>
            <TasksWrapper>
              <Skeleton width={20} height={40} />
              <Skeleton width={150} height={40} />
            </TasksWrapper>
            <Skeleton width={20} height={40} />
          </Box>
        ))}
      <Box sx={containerSx}>
        {Array(3)
          .fill(null)
          .map((_, id) => (
            <Skeleton key={id} width={80} height={60} />
          ))}
      </Box>
    </StyledPaper>
  )
}


üìÅ styles
----------------------------------------

üìÑ styles\GlobalStyled.ts
==============================
import { createGlobalStyle } from "styled-components"

export const GlobalStyle = createGlobalStyle`
  *, *::before, *::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: "Fira Code", monospace;—ã
    font-optical-sizing: auto;
    font-weight: 500;
    font-style: normal;
    line-height: 1.2;
  }

  html {
    height: 100%;
    background-attachment: fixed; /* –§–∏–∫—Å–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ */
    background-size: cover; /* –ü–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ */
    background-repeat: no-repeat;
    background-color: ${({ theme }) => theme.palette.background.default};
  }

  body {
    margin: 0;
    min-height: 100vh; /* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç—è–Ω—É—Ç–æ */
    display: flex;
    flex-direction: column;
    background-repeat: no-repeat; /* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è */
    background-size: contain; /* –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–º–µ—â–∞–ª–æ—Å—å */
    background-position: center; /* –†–∞–∑–º–µ—â–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ */
  }
  

  //#root {
  //  min-height: 100vh;
  //  display: flex;
  //  flex-direction: column;
  //}

  a {
    text-decoration: none;
  }

  ul {
    list-style: none;
  }

  button {
    background-color: unset;
    border: none;
  }
`

